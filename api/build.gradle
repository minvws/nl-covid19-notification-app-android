plugins {
    alias(libs.plugins.android.library)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.ksp)
    id 'jacoco'
}
apply from: rootProject.file("jacoco.gradle")

ext.cdnEndpoint = ext.has("cdnEndpoint") ? ext.cdnEndpoint : "http://localhost/"
ext.apiEndpoint = ext.has("apiEndpoint") ? ext.apiEndpoint : "http://localhost/"

android {

    defaultConfig {
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        buildConfigField "String", "CDN_BASE_URL", "\"https://dist.test.coronamelder.nl/\""
        buildConfigField "String", "API_BASE_URL", "\"https://api.test.coronamelder.nl/\""
        buildConfigField "boolean", "FEATURE_RESPONSE_SIGNATURES", "true"
    }

    testOptions {
        unitTests.includeAndroidResources = true
        unitTests.all {
            // https://github.com/robolectric/robolectric/issues/5115
            systemProperty("javax.net.ssl.trustStoreType", "JKS")

            // https://github.com/robolectric/robolectric/issues/5456
            systemProperty("robolectric.dependency.repo.id", "central")
            systemProperty("robolectric.dependency.repo.url", "https://repo1.maven.org/maven2")
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            // Uncomment to disable pinning for all debug variants
            // buildConfigField "boolean", "FEATURE_SSL_PINNING", "false"
        }
    }

    flavorDimensions "environment"

    productFlavors {
        dev {
            dimension "environment"
            buildConfigField "boolean", "FEATURE_RESPONSE_SIGNATURES", "false"
            buildConfigField "String", "CDN_BASE_URL", "\"${cdnEndpoint}\""
            buildConfigField "String", "API_BASE_URL", "\"${apiEndpoint}\""
        }
        tst {
            dimension "environment"
        }
        pentest {
            dimension "environment"
        }
        acc {
            dimension "environment"
            buildConfigField "String", "CDN_BASE_URL", "\"https://dist.acceptatie.coronamelder.nl/\""
            buildConfigField "String", "API_BASE_URL", "\"https://api.acceptatie.coronamelder.nl/\""
        }
        prod {
            dimension "environment"
            buildConfigField "String", "CDN_BASE_URL", "\"https://dist.productie.coronamelder.nl/\""
            buildConfigField "String", "API_BASE_URL", "\"https://api.productie.coronamelder.nl/\""
        }
    }

    compileOptions.coreLibraryDesugaringEnabled true

    kotlin {
        sourceSets.main {
            kotlin.srcDir("build/generated/ksp/main/kotlin")
        }
        sourceSets.test {
            kotlin.srcDir("build/generated/ksp/test/kotlin")
        }
    }
}

dependencies {
    implementation project(":signing")
    coreLibraryDesugaring libs.desugar
    api libs.kotlin.coroutines.android
    api libs.retrofit2
    implementation libs.retrofit2.converter.moshi
    api libs.okhttp3
    implementation libs.okhttp3.logging.interceptor
    implementation(libs.moshi.kotlin) {
        exclude group: "org.jetbrains.kotlin", module: "kotlin-reflect"
    }
    implementation libs.moshi.adapters
    ksp libs.moshi.kotlin.codegen
    implementation libs.timber

    testImplementation libs.junit
    testImplementation libs.androidx.test.core
    testImplementation libs.okhttp3.mockwebserver
    testImplementation libs.okhttp3.tls
    testImplementation libs.robolectric
}
