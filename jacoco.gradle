/*
 *  Copyright (c) 2020 De Staat der Nederlanden, Ministerie van Volksgezondheid, Welzijn en Sport.
 *   Licensed under the EUROPEAN UNION PUBLIC LICENCE v. 1.2
 *
 *   SPDX-License-Identifier: EUPL-1.2
 *
 */
jacoco {
    toolVersion = '0.8.7'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

project.afterEvaluate {
    def variants
    if (project.android.hasProperty('applicationVariants')) {
        variants = android.applicationVariants }
    else {
        variants = android.libraryVariants
    }
    variants.all { variant ->
        def variantName = variant.name
        def testTaskName = "test${variantName.capitalize()}UnitTest"

        tasks.create(name: "${testTaskName}Coverage", type: JacocoReport, dependsOn: "$testTaskName") {
            group = "Reporting"
            description = "Generate Jacoco coverage reports for the ${variantName.capitalize()} build."

            reports {
                html.required = true
                xml.required = true
            }

            def excludes = [
                    'jdk.internal.*',
                    '**/R.class',
                    '**/R$*.class',
                    '**/BuildConfig.*',
                    '**/*Item*.*',
                    '**/*Section*.*',
                    '**/*Fragment*.*',
                    '**/*Activity*.*',
                    '**/EnApplication.*',
                    '**/Manifest*.*',
                    '**/*Test*.*',
                    'android/**/*.*'
            ]
            def javaClasses = fileTree(dir: variant.javaCompileProvider.get().destinationDir, excludes: excludes)
            def kotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/${variantName}", excludes: excludes)
            classDirectories.setFrom(files([javaClasses, kotlinClasses]))

            sourceDirectories.setFrom(files([
                    "$project.projectDir/src/main/java",
                    "$project.projectDir/src/${variantName}/java",
                    "$project.projectDir/src/main/kotlin",
                    "$project.projectDir/src/${variantName}/kotlin"
            ]))
            executionData.setFrom(files("${project.buildDir}/jacoco/${testTaskName}.exec"))
        }
    }
}
