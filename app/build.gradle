plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.kapt)
    alias(libs.plugins.navigation.safeargs)
    alias(libs.plugins.tripletPlay)
    alias(libs.plugins.fladle)
    alias(libs.plugins.firebase.appdistribution)
    id 'jacoco'
}

apply from: rootProject.file("jacoco.gradle")

version = "2.5.10"
def buildVersionCode = System.getenv("BUILD_ID") != null ? System.getenv("BUILD_ID").toInteger() : 125210
archivesBaseName = "coronamelder-${version}-${buildVersionCode}"

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

android {

    defaultConfig {
        applicationId "nl.rijksoverheid.en"
        versionCode buildVersionCode
        versionName version

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testOptions.unitTests.includeAndroidResources = true

        resConfigs "nl", "en", "de", "pl", "ro", "tr", "fr", "es", "bg", "ar", "fy"

        buildConfigField "boolean", "FEATURE_LOGGING", "false"
        buildConfigField "boolean", "FEATURE_DEBUG_NOTIFICATION", "false"
        buildConfigField "boolean", "FEATURE_SECURE_SCREEN", "true"
    }

    testOptions {
        unitTests.includeAndroidResources = true
        unitTests.all {
            // https://github.com/robolectric/robolectric/issues/5115
            systemProperty("javax.net.ssl.trustStoreType", "JKS")

            // https://github.com/robolectric/robolectric/issues/5456
            systemProperty("robolectric.dependency.repo.id", "central")
            systemProperty("robolectric.dependency.repo.url", "https://repo1.maven.org/maven2")
        }
    }

    lintOptions {
        // Disable InvalidFragmentVersionForActivityResult for now due to false positives.
        // See https://issuetracker.google.com/issues/182388985#comment9
        // Re-enable after updating to next androidx.activity:activity-ktx version
        disable 'InvalidFragmentVersionForActivityResult'
    }

    packagingOptions {
        exclude 'kotlin/**'
        exclude '**/*.kotlin_metadata'
        exclude 'META-INF/*.kotlin_module'
        exclude 'META-INF/*.version'
        exclude 'DebugProbesKt.bin'
        exclude 'build-data.properties'
        exclude 'play-**.properties'
    }

    signingConfigs {
        release {
            storeFile new File(System.getenv("KEYSTORE_FILE") != null ? System.getenv("KEYSTORE_FILE") : "dummy-keystore.jks")
            storePassword System.getenv("KEYSTORE_PASSWORD")
            keyAlias System.getenv("KEYSTORE_KEY_ALIAS")
            keyPassword System.getenv("KEYSTORE_KEY_PASSWORD")
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            buildConfigField "String", "GIT_VERSION", "\"${getGitHash()}\""
        }

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField "boolean", "FEATURE_LOGGING", "true"
            buildConfigField "String", "GIT_VERSION", "\"dev\""
        }
    }

    flavorDimensions "environment"

    productFlavors {
        dev {
            dimension "environment"
            buildConfigField "boolean", "FEATURE_SECURE_SCREEN", "false"
            buildConfigField "boolean", "FEATURE_DEBUG_NOTIFICATION", "true"
            versionNameSuffix "-dev"
        }
        tst {
            dimension "environment"
            buildConfigField "boolean", "FEATURE_SECURE_SCREEN", "false"
            buildConfigField "boolean", "FEATURE_LOGGING", "true"
            buildConfigField "boolean", "FEATURE_DEBUG_NOTIFICATION", "true"
            versionNameSuffix "-tst"
        }
        pentest {
            dimension "environment"
            buildConfigField "boolean", "FEATURE_SECURE_SCREEN", "false"
            buildConfigField "boolean", "FEATURE_LOGGING", "true"
            buildConfigField "boolean", "FEATURE_DEBUG_NOTIFICATION", "true"
            versionNameSuffix "-pentest"
        }
        acc {
            dimension "environment"
            buildConfigField "boolean", "FEATURE_LOGGING", "true"
            versionNameSuffix "-acc"
        }
        prod {
            dimension "environment"
        }
    }

    compileOptions.coreLibraryDesugaringEnabled true

    buildFeatures {
        viewBinding true
        dataBinding true
    }

    variantFilter { variant ->
        def names = variant.flavors*.name
        if (variant.buildType.name == 'debug' && names.contains("prod")) {
            setIgnore(true)
        }
    }

    firebaseAppDistribution {
        appId = "1:937920499570:android:9ac7b5cf66523282f957eb"
        releaseNotesFile = rootProject.file("app/src/main/play/release-notes/nl-NL/internal.txt")
        groups = "android-latest"
    }

    kotlinOptions {
        freeCompilerArgs += ["-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi"]
    }
}

play {
    enabled = System.getenv("PLAY_STORE_CREDENTIALS") != null
    serviceAccountCredentials = System.getenv("PLAY_STORE_CREDENTIALS") != null ? new File(System.getenv("PLAY_STORE_CREDENTIALS")) : null
    track = "internal"
}

fladle {
    projectId = "vws-coronamelder"
    variant = "devDebug"
    testShards = 1
    devices = [
            ["model": "Pixel2", "version": "28"]
    ]
    testTargets = ["notAnnotation nl.rijksoverheid.en.screenshots.StoreScreenshots"]
}

dependencies {
    coreLibraryDesugaring libs.desugar
    implementation project(":api")
    implementation project(":en-api")
    implementation project(":signing")
    implementation libs.androidx.appcompat
    implementation libs.androidx.activity
    implementation libs.androidx.fragment
    implementation libs.androidx.core
    implementation libs.androidx.core.splashscreen
    implementation libs.androidx.constraintlayout
    implementation libs.androidx.browser
    implementation libs.androidx.lifecycle.viewmodel
    implementation libs.androidx.lifecycle.livedata
    implementation libs.androidx.lifecycle.common.java8
    implementation libs.androidx.lifecycle.process
    implementation libs.androidx.work.runtime
    implementation libs.androidx.preference
    implementation libs.androidx.security.crypto
    implementation libs.androidx.navigation.fragment
    implementation libs.androidx.navigation.ui
    androidTestImplementation libs.androidx.navigation.testing
    implementation libs.timber
    implementation libs.material
    implementation libs.bundles.play.core
    implementation libs.bundles.playServices
    implementation libs.lottie
    implementation libs.bundles.groupie
    implementation libs.insetter

    testImplementation project(":test-support")
    debugImplementation project(":test-support")
    androidTestDebugImplementation project(":test-support")
    testImplementation libs.junit
    testImplementation libs.androidx.core.testing
    testImplementation libs.androidx.work.testing
    testImplementation libs.mockito.kotlin
    testImplementation libs.mockito.core
    androidTestImplementation libs.mockito.android
    androidTestImplementation libs.mockito.kotlin
    testImplementation libs.okhttp3.mockwebserver
    testImplementation libs.kotlin.coroutines.testing
    testImplementation libs.robolectric
    androidTestImplementation libs.androidx.core.testing
    androidTestImplementation libs.androidx.test.junit
    androidTestImplementation libs.bundles.espresso
    androidTestImplementation libs.androidx.test.uiautomator
    // TODO check if this is needed; the test runner should already do this
    androidTestImplementation libs.disableAnimationsRule
    androidTestImplementation libs.junit4AndroidIntegrationRules
    androidTestImplementation libs.fastlane.screengrab
    tstImplementation libs.beagle.ui.drawer
}
